{"ast":null,"code":"import axios from 'axios';\n\n// Configurar la URL base de todas las llamadas AJAX a Axios\naxios.defaults.baseURL = 'http://localhost:3000/api';\n\n// Añadir un interceptor para incluir el token JWT en cada solicitud si está disponible\naxios.interceptors.request.use(config => {\n  // Obtener el token de localStorage\n  const token = localStorage.getItem('token');\n  // Si el token existe, añadirlo a los headers de la solicitud\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // Devolver la promesa con el error si hay alguno\n  return Promise.reject(error);\n});\n\n// Manejar respuestas con error globalmente\naxios.interceptors.response.use(response => response,\n// Si no hay errores, simplemente devolver la respuesta\nerror => {\n  // Si la respuesta es un error 401, por ejemplo, podrías manejar aquí la lógica de redirección\n  if (error.response && error.response.status === 401) {\n    // Opcional: redirigir al usuario a la página de inicio de sesión\n    // window.location.href = '/login';\n    console.error('Unauthorized, redirecting...');\n  }\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["axios","defaults","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","status","console"],"sources":["C:/Users/victo/Documents/GitHub/DSW_EXTRA/frontend/src/axiosConfig.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configurar la URL base de todas las llamadas AJAX a Axios\r\naxios.defaults.baseURL = 'http://localhost:3000/api';\r\n\r\n// Añadir un interceptor para incluir el token JWT en cada solicitud si está disponible\r\naxios.interceptors.request.use(\r\n    config => {\r\n        // Obtener el token de localStorage\r\n        const token = localStorage.getItem('token');\r\n        // Si el token existe, añadirlo a los headers de la solicitud\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        // Devolver la promesa con el error si hay alguno\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Manejar respuestas con error globalmente\r\naxios.interceptors.response.use(\r\n    response => response,  // Si no hay errores, simplemente devolver la respuesta\r\n    error => {\r\n        // Si la respuesta es un error 401, por ejemplo, podrías manejar aquí la lógica de redirección\r\n        if (error.response && error.response.status === 401) {\r\n            // Opcional: redirigir al usuario a la página de inicio de sesión\r\n            // window.location.href = '/login';\r\n            console.error('Unauthorized, redirecting...');\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axios;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,2BAA2B;;AAEpD;AACAF,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACN;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C;EACA,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACDK,KAAK,IAAI;EACL;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAX,KAAK,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAIA,QAAQ;AAAG;AACvBH,KAAK,IAAI;EACL;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD;IACA;IACAC,OAAO,CAACL,KAAK,CAAC,8BAA8B,CAAC;EACjD;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeX,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}